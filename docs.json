[{"name":"Projection","comment":" Do geometric projection.\n\nTypes are defined in `Projection.Types`.\n\n@docs project\n\n","unions":[],"aliases":[],"values":[{"name":"project","comment":" Project a point to one fewer dimensions.\n","type":"Projection.Types.Point -> Projection.Types.Eye -> ( Projection.Types.Point, Projection.Types.Eye )"}],"binops":[]},{"name":"Projection.EncodeDecode","comment":" Json encoders and decoders for `Projection.Types`\n\n\n# Encoders\n\n@docs encodeNumber, encodePoint, encodeVector\n@docs encodeShape, encodeRoom, encodeEye, encodeSeer\n\n\n# Decoders\n\n@docs numberDecoder, pointDecoder, vectorDecoder\n@docs shapeDecoder, roomDecoder, eyeDecoder, seerDecoder\n\n","unions":[],"aliases":[],"values":[{"name":"encodeEye","comment":" Encode an `Eye`\n","type":"Projection.Types.Eye -> Json.Encode.Value"},{"name":"encodeNumber","comment":" Encode a `Number`\n","type":"Projection.Types.Number -> Json.Encode.Value"},{"name":"encodePoint","comment":" Encode a `Point`\n","type":"Projection.Types.Point -> Json.Encode.Value"},{"name":"encodeRoom","comment":" Encode a `Room`.\n","type":"Projection.Types.Room -> Json.Encode.Value"},{"name":"encodeSeer","comment":" Encode a `Seer`\n","type":"Projection.Types.Seer -> Json.Encode.Value"},{"name":"encodeShape","comment":" Encode a `Shape`.\n","type":"Projection.Types.Shape -> Json.Encode.Value"},{"name":"encodeVector","comment":" Encode a `Vector`\n","type":"Projection.Types.Vector -> Json.Encode.Value"},{"name":"eyeDecoder","comment":" Decoder for `Eye`s.\n","type":"Json.Decode.Decoder Projection.Types.Eye"},{"name":"numberDecoder","comment":" `Decoder` for `Number`s\n","type":"Json.Decode.Decoder Projection.Types.Number"},{"name":"pointDecoder","comment":" Decoder for `Point`s.\n","type":"Json.Decode.Decoder Projection.Types.Point"},{"name":"roomDecoder","comment":" Decoder for `Room`s.\n","type":"Json.Decode.Decoder Projection.Types.Room"},{"name":"seerDecoder","comment":" Decoder for `Seer`s.\n","type":"Json.Decode.Decoder Projection.Types.Seer"},{"name":"shapeDecoder","comment":" Decoder for `Shape`s.\n","type":"Json.Decode.Decoder Projection.Types.Shape"},{"name":"vectorDecoder","comment":" Decoder for `Vector`s.\n","type":"Json.Decode.Decoder Projection.Types.Vector"}],"binops":[]},{"name":"Projection.Types","comment":" Types for Projection.elm\nThis module allows you to project a point into one fewer dimensions,\ngiven the eye looking at it.\n\n\n# Basic types\n\n@docs Number, Point, Vector\n\n\n# Things\n\n@docs Shape, Room\n\n\n# Seeing\n\n@docs Eye, Seer\n\n","unions":[],"aliases":[{"name":"Eye","comment":" The observer for the projection.\n","args":[],"type":"{ position : Projection.Types.Point, direction : Projection.Types.Vector, up : Projection.Types.Vector }"},{"name":"Number","comment":" A number. Currently a `Float`.\n","args":[],"type":"Basics.Float"},{"name":"Point","comment":" An ordered list of `Number`s, one for each dimension.\n","args":[],"type":"List.List Projection.Types.Number"},{"name":"Room","comment":" A list of `Shape`s.\n","args":[],"type":"List.List Projection.Types.Shape"},{"name":"Seer","comment":" A `Shape` that can see.\n","args":[],"type":"{ body : Projection.Types.Room, eye : Projection.Types.Eye }"},{"name":"Shape","comment":" An ordered list of `Point`s.\n\nTo draw a shape, draw a line from each point to the next one.\n\n","args":[],"type":"List.List Projection.Types.Point"},{"name":"Vector","comment":" Two points, from & to\n","args":[],"type":"{ from : Projection.Types.Point, to : Projection.Types.Point }"}],"values":[],"binops":[]},{"name":"Projection.Util","comment":" Utilities for `Project.Types`\n\n\n# Count Dimension\n\n@docs numberDimension, pointDimension, vectorDimension\n@docs shapeDimension, roomDimension, eyeDimension, seerDimension\n\n\n# Check Validity\n\n@docs isEyeValid, isRoomValid, isSeerValid, isShapeValid, isVectorValid\n\n\n# `distance`\n\nThis IS a metric space, so it has a `distance` function.\n\nImagine a package for non-metric spaces.\n\n@docs pointDistance\n\n\n# Apply, Elm Style\n\n@docs applyid, apply0, apply1\n\n","unions":[],"aliases":[],"values":[{"name":"apply0","comment":" `apply` for functions with an id of 0.\n","type":"(a -> Projection.Types.Number -> Projection.Types.Number) -> List.List a -> Projection.Types.Number"},{"name":"apply1","comment":" `apply` for functions with an id of 1.\n","type":"(a -> Projection.Types.Number -> Projection.Types.Number) -> List.List a -> Projection.Types.Number"},{"name":"applyid","comment":" I don't think Elm has apply, and I discovered why when I wrote it.\nYou need an ID function, as a basis for the value, when there are no args.\n","type":"y -> (x -> y -> y) -> List.List x -> y"},{"name":"eyeDimension","comment":" Count the dimensions of an `Eye`.\n","type":"Projection.Types.Eye -> Basics.Int"},{"name":"isEyeValid","comment":" An `Eye` is valid if `eye.direction` is valid and\n`eye.direction.from == eye.position`,\nAnd the `eye.direction` is not of zero length.\n","type":"Projection.Types.Eye -> Basics.Bool"},{"name":"isRoomValid","comment":" A `Room` is valid if all of its `Shape`s are valid and have the same dimension.\n","type":"Projection.Types.Room -> Basics.Bool"},{"name":"isSeerValid","comment":" A `Seer` is valid if both its `eye` and its `body` are valid\nand have the same number of dimension.\n","type":"Projection.Types.Seer -> Basics.Bool"},{"name":"isShapeValid","comment":" A `Shape` is valid if all of its `Point`s are of the same dimension.\n","type":"Projection.Types.Shape -> Basics.Bool"},{"name":"isVectorValid","comment":" A `Vector` is valid if both of its ends have the same number of dimension.\n","type":"Projection.Types.Vector -> Basics.Bool"},{"name":"numberDimension","comment":" A number has 0 dimension.\n","type":"Projection.Types.Number -> Basics.Int"},{"name":"pointDimension","comment":" Count the dimensions of a `Point`.\n","type":"Projection.Types.Point -> Basics.Int"},{"name":"pointDistance","comment":" The distance between two points.\n\n    sqrt ((p1 - p2) ** 2)\n\n","type":"Projection.Types.Point -> Projection.Types.Point -> Projection.Types.Number"},{"name":"roomDimension","comment":" Count the dimensions of a `Room`.\n","type":"Projection.Types.Room -> Basics.Int"},{"name":"seerDimension","comment":" Count the dimensions of a `Seer`.\n","type":"Projection.Types.Seer -> Basics.Int"},{"name":"shapeDimension","comment":" Count the dimensions of a `Shape`.\n","type":"Projection.Types.Shape -> Basics.Int"},{"name":"vectorDimension","comment":" Count the dimensions of a `Vector`.\n","type":"Projection.Types.Vector -> Basics.Int"}],"binops":[]}]